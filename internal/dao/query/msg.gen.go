// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"bot/internal/dao/model"
)

func newMsg(db *gorm.DB, opts ...gen.DOOption) msg {
	_msg := msg{}

	_msg.msgDo.UseDB(db, opts...)
	_msg.msgDo.UseModel(&model.Msg{})

	tableName := _msg.msgDo.TableName()
	_msg.ALL = field.NewAsterisk(tableName)
	_msg.ID = field.NewInt32(tableName, "id")
	_msg.MsgID = field.NewInt32(tableName, "msg_id")
	_msg.FromUserName = field.NewString(tableName, "from_user_name")
	_msg.ToUserName = field.NewString(tableName, "to_user_name")
	_msg.MsgType = field.NewInt32(tableName, "msg_type")
	_msg.Content = field.NewString(tableName, "content")
	_msg.Status = field.NewInt32(tableName, "status")
	_msg.ImgStatus = field.NewInt32(tableName, "img_status")
	_msg.ImgBufILen = field.NewInt32(tableName, "img_buf_i_len")
	_msg.CreateTime = field.NewInt32(tableName, "create_time")
	_msg.MsgSource = field.NewString(tableName, "msg_source")
	_msg.PushContent = field.NewString(tableName, "push_content")
	_msg.NewMsgID = field.NewInt32(tableName, "new_msg_id")
	_msg.MsgSeq = field.NewInt32(tableName, "msg_seq")
	_msg.Wxid = field.NewString(tableName, "wxid")
	_msg.Appid = field.NewString(tableName, "appid")
	_msg.TypeName = field.NewString(tableName, "type_name")

	_msg.fillFieldMap()

	return _msg
}

type msg struct {
	msgDo msgDo

	ALL          field.Asterisk
	ID           field.Int32
	MsgID        field.Int32
	FromUserName field.String
	ToUserName   field.String
	MsgType      field.Int32
	Content      field.String
	Status       field.Int32
	ImgStatus    field.Int32
	ImgBufILen   field.Int32
	CreateTime   field.Int32
	MsgSource    field.String
	PushContent  field.String
	NewMsgID     field.Int32
	MsgSeq       field.Int32
	Wxid         field.String
	Appid        field.String
	TypeName     field.String

	fieldMap map[string]field.Expr
}

func (m msg) Table(newTableName string) *msg {
	m.msgDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m msg) As(alias string) *msg {
	m.msgDo.DO = *(m.msgDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *msg) updateTableName(table string) *msg {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt32(table, "id")
	m.MsgID = field.NewInt32(table, "msg_id")
	m.FromUserName = field.NewString(table, "from_user_name")
	m.ToUserName = field.NewString(table, "to_user_name")
	m.MsgType = field.NewInt32(table, "msg_type")
	m.Content = field.NewString(table, "content")
	m.Status = field.NewInt32(table, "status")
	m.ImgStatus = field.NewInt32(table, "img_status")
	m.ImgBufILen = field.NewInt32(table, "img_buf_i_len")
	m.CreateTime = field.NewInt32(table, "create_time")
	m.MsgSource = field.NewString(table, "msg_source")
	m.PushContent = field.NewString(table, "push_content")
	m.NewMsgID = field.NewInt32(table, "new_msg_id")
	m.MsgSeq = field.NewInt32(table, "msg_seq")
	m.Wxid = field.NewString(table, "wxid")
	m.Appid = field.NewString(table, "appid")
	m.TypeName = field.NewString(table, "type_name")

	m.fillFieldMap()

	return m
}

func (m *msg) WithContext(ctx context.Context) *msgDo { return m.msgDo.WithContext(ctx) }

func (m msg) TableName() string { return m.msgDo.TableName() }

func (m msg) Alias() string { return m.msgDo.Alias() }

func (m msg) Columns(cols ...field.Expr) gen.Columns { return m.msgDo.Columns(cols...) }

func (m *msg) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *msg) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 17)
	m.fieldMap["id"] = m.ID
	m.fieldMap["msg_id"] = m.MsgID
	m.fieldMap["from_user_name"] = m.FromUserName
	m.fieldMap["to_user_name"] = m.ToUserName
	m.fieldMap["msg_type"] = m.MsgType
	m.fieldMap["content"] = m.Content
	m.fieldMap["status"] = m.Status
	m.fieldMap["img_status"] = m.ImgStatus
	m.fieldMap["img_buf_i_len"] = m.ImgBufILen
	m.fieldMap["create_time"] = m.CreateTime
	m.fieldMap["msg_source"] = m.MsgSource
	m.fieldMap["push_content"] = m.PushContent
	m.fieldMap["new_msg_id"] = m.NewMsgID
	m.fieldMap["msg_seq"] = m.MsgSeq
	m.fieldMap["wxid"] = m.Wxid
	m.fieldMap["appid"] = m.Appid
	m.fieldMap["type_name"] = m.TypeName
}

func (m msg) clone(db *gorm.DB) msg {
	m.msgDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m msg) replaceDB(db *gorm.DB) msg {
	m.msgDo.ReplaceDB(db)
	return m
}

type msgDo struct{ gen.DO }

func (m msgDo) Debug() *msgDo {
	return m.withDO(m.DO.Debug())
}

func (m msgDo) WithContext(ctx context.Context) *msgDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m msgDo) ReadDB() *msgDo {
	return m.Clauses(dbresolver.Read)
}

func (m msgDo) WriteDB() *msgDo {
	return m.Clauses(dbresolver.Write)
}

func (m msgDo) Session(config *gorm.Session) *msgDo {
	return m.withDO(m.DO.Session(config))
}

func (m msgDo) Clauses(conds ...clause.Expression) *msgDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m msgDo) Returning(value interface{}, columns ...string) *msgDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m msgDo) Not(conds ...gen.Condition) *msgDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m msgDo) Or(conds ...gen.Condition) *msgDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m msgDo) Select(conds ...field.Expr) *msgDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m msgDo) Where(conds ...gen.Condition) *msgDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m msgDo) Order(conds ...field.Expr) *msgDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m msgDo) Distinct(cols ...field.Expr) *msgDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m msgDo) Omit(cols ...field.Expr) *msgDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m msgDo) Join(table schema.Tabler, on ...field.Expr) *msgDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m msgDo) LeftJoin(table schema.Tabler, on ...field.Expr) *msgDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m msgDo) RightJoin(table schema.Tabler, on ...field.Expr) *msgDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m msgDo) Group(cols ...field.Expr) *msgDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m msgDo) Having(conds ...gen.Condition) *msgDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m msgDo) Limit(limit int) *msgDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m msgDo) Offset(offset int) *msgDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m msgDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *msgDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m msgDo) Unscoped() *msgDo {
	return m.withDO(m.DO.Unscoped())
}

func (m msgDo) Create(values ...*model.Msg) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m msgDo) CreateInBatches(values []*model.Msg, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m msgDo) Save(values ...*model.Msg) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m msgDo) First() (*model.Msg, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Msg), nil
	}
}

func (m msgDo) Take() (*model.Msg, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Msg), nil
	}
}

func (m msgDo) Last() (*model.Msg, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Msg), nil
	}
}

func (m msgDo) Find() ([]*model.Msg, error) {
	result, err := m.DO.Find()
	return result.([]*model.Msg), err
}

func (m msgDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Msg, err error) {
	buf := make([]*model.Msg, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m msgDo) FindInBatches(result *[]*model.Msg, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m msgDo) Attrs(attrs ...field.AssignExpr) *msgDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m msgDo) Assign(attrs ...field.AssignExpr) *msgDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m msgDo) Joins(fields ...field.RelationField) *msgDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m msgDo) Preload(fields ...field.RelationField) *msgDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m msgDo) FirstOrInit() (*model.Msg, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Msg), nil
	}
}

func (m msgDo) FirstOrCreate() (*model.Msg, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Msg), nil
	}
}

func (m msgDo) FindByPage(offset int, limit int) (result []*model.Msg, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m msgDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m msgDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m msgDo) Delete(models ...*model.Msg) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *msgDo) withDO(do gen.Dao) *msgDo {
	m.DO = *do.(*gen.DO)
	return m
}
