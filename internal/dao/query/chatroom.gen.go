// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"bot/internal/dao/model"
)

func newChatroom(db *gorm.DB, opts ...gen.DOOption) chatroom {
	_chatroom := chatroom{}

	_chatroom.chatroomDo.UseDB(db, opts...)
	_chatroom.chatroomDo.UseModel(&model.Chatroom{})

	tableName := _chatroom.chatroomDo.TableName()
	_chatroom.ALL = field.NewAsterisk(tableName)
	_chatroom.ID = field.NewInt32(tableName, "id")
	_chatroom.ChatroomID = field.NewString(tableName, "chatroom_id")
	_chatroom.NickName = field.NewString(tableName, "nick_name")
	_chatroom.PyInitial = field.NewString(tableName, "py_initial")
	_chatroom.QuanPin = field.NewString(tableName, "quan_pin")
	_chatroom.Sex = field.NewInt32(tableName, "sex")
	_chatroom.Remark = field.NewString(tableName, "remark")
	_chatroom.RemarkPyInitial = field.NewString(tableName, "remark_py_initial")
	_chatroom.RemarkQuanPin = field.NewString(tableName, "remark_quan_pin")
	_chatroom.ChatRoomNotify = field.NewInt32(tableName, "chat_room_notify")
	_chatroom.ChatRoomOwner = field.NewString(tableName, "chat_room_owner")
	_chatroom.SmallHeadImgURL = field.NewString(tableName, "small_head_img_url")

	_chatroom.fillFieldMap()

	return _chatroom
}

type chatroom struct {
	chatroomDo chatroomDo

	ALL             field.Asterisk
	ID              field.Int32
	ChatroomID      field.String
	NickName        field.String
	PyInitial       field.String
	QuanPin         field.String
	Sex             field.Int32
	Remark          field.String
	RemarkPyInitial field.String
	RemarkQuanPin   field.String
	ChatRoomNotify  field.Int32
	ChatRoomOwner   field.String
	SmallHeadImgURL field.String

	fieldMap map[string]field.Expr
}

func (c chatroom) Table(newTableName string) *chatroom {
	c.chatroomDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c chatroom) As(alias string) *chatroom {
	c.chatroomDo.DO = *(c.chatroomDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *chatroom) updateTableName(table string) *chatroom {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt32(table, "id")
	c.ChatroomID = field.NewString(table, "chatroom_id")
	c.NickName = field.NewString(table, "nick_name")
	c.PyInitial = field.NewString(table, "py_initial")
	c.QuanPin = field.NewString(table, "quan_pin")
	c.Sex = field.NewInt32(table, "sex")
	c.Remark = field.NewString(table, "remark")
	c.RemarkPyInitial = field.NewString(table, "remark_py_initial")
	c.RemarkQuanPin = field.NewString(table, "remark_quan_pin")
	c.ChatRoomNotify = field.NewInt32(table, "chat_room_notify")
	c.ChatRoomOwner = field.NewString(table, "chat_room_owner")
	c.SmallHeadImgURL = field.NewString(table, "small_head_img_url")

	c.fillFieldMap()

	return c
}

func (c *chatroom) WithContext(ctx context.Context) *chatroomDo { return c.chatroomDo.WithContext(ctx) }

func (c chatroom) TableName() string { return c.chatroomDo.TableName() }

func (c chatroom) Alias() string { return c.chatroomDo.Alias() }

func (c chatroom) Columns(cols ...field.Expr) gen.Columns { return c.chatroomDo.Columns(cols...) }

func (c *chatroom) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *chatroom) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 12)
	c.fieldMap["id"] = c.ID
	c.fieldMap["chatroom_id"] = c.ChatroomID
	c.fieldMap["nick_name"] = c.NickName
	c.fieldMap["py_initial"] = c.PyInitial
	c.fieldMap["quan_pin"] = c.QuanPin
	c.fieldMap["sex"] = c.Sex
	c.fieldMap["remark"] = c.Remark
	c.fieldMap["remark_py_initial"] = c.RemarkPyInitial
	c.fieldMap["remark_quan_pin"] = c.RemarkQuanPin
	c.fieldMap["chat_room_notify"] = c.ChatRoomNotify
	c.fieldMap["chat_room_owner"] = c.ChatRoomOwner
	c.fieldMap["small_head_img_url"] = c.SmallHeadImgURL
}

func (c chatroom) clone(db *gorm.DB) chatroom {
	c.chatroomDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c chatroom) replaceDB(db *gorm.DB) chatroom {
	c.chatroomDo.ReplaceDB(db)
	return c
}

type chatroomDo struct{ gen.DO }

func (c chatroomDo) Debug() *chatroomDo {
	return c.withDO(c.DO.Debug())
}

func (c chatroomDo) WithContext(ctx context.Context) *chatroomDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c chatroomDo) ReadDB() *chatroomDo {
	return c.Clauses(dbresolver.Read)
}

func (c chatroomDo) WriteDB() *chatroomDo {
	return c.Clauses(dbresolver.Write)
}

func (c chatroomDo) Session(config *gorm.Session) *chatroomDo {
	return c.withDO(c.DO.Session(config))
}

func (c chatroomDo) Clauses(conds ...clause.Expression) *chatroomDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c chatroomDo) Returning(value interface{}, columns ...string) *chatroomDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c chatroomDo) Not(conds ...gen.Condition) *chatroomDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c chatroomDo) Or(conds ...gen.Condition) *chatroomDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c chatroomDo) Select(conds ...field.Expr) *chatroomDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c chatroomDo) Where(conds ...gen.Condition) *chatroomDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c chatroomDo) Order(conds ...field.Expr) *chatroomDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c chatroomDo) Distinct(cols ...field.Expr) *chatroomDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c chatroomDo) Omit(cols ...field.Expr) *chatroomDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c chatroomDo) Join(table schema.Tabler, on ...field.Expr) *chatroomDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c chatroomDo) LeftJoin(table schema.Tabler, on ...field.Expr) *chatroomDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c chatroomDo) RightJoin(table schema.Tabler, on ...field.Expr) *chatroomDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c chatroomDo) Group(cols ...field.Expr) *chatroomDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c chatroomDo) Having(conds ...gen.Condition) *chatroomDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c chatroomDo) Limit(limit int) *chatroomDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c chatroomDo) Offset(offset int) *chatroomDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c chatroomDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *chatroomDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c chatroomDo) Unscoped() *chatroomDo {
	return c.withDO(c.DO.Unscoped())
}

func (c chatroomDo) Create(values ...*model.Chatroom) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c chatroomDo) CreateInBatches(values []*model.Chatroom, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c chatroomDo) Save(values ...*model.Chatroom) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c chatroomDo) First() (*model.Chatroom, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Chatroom), nil
	}
}

func (c chatroomDo) Take() (*model.Chatroom, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Chatroom), nil
	}
}

func (c chatroomDo) Last() (*model.Chatroom, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Chatroom), nil
	}
}

func (c chatroomDo) Find() ([]*model.Chatroom, error) {
	result, err := c.DO.Find()
	return result.([]*model.Chatroom), err
}

func (c chatroomDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Chatroom, err error) {
	buf := make([]*model.Chatroom, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c chatroomDo) FindInBatches(result *[]*model.Chatroom, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c chatroomDo) Attrs(attrs ...field.AssignExpr) *chatroomDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c chatroomDo) Assign(attrs ...field.AssignExpr) *chatroomDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c chatroomDo) Joins(fields ...field.RelationField) *chatroomDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c chatroomDo) Preload(fields ...field.RelationField) *chatroomDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c chatroomDo) FirstOrInit() (*model.Chatroom, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Chatroom), nil
	}
}

func (c chatroomDo) FirstOrCreate() (*model.Chatroom, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Chatroom), nil
	}
}

func (c chatroomDo) FindByPage(offset int, limit int) (result []*model.Chatroom, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c chatroomDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c chatroomDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c chatroomDo) Delete(models ...*model.Chatroom) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *chatroomDo) withDO(do gen.Dao) *chatroomDo {
	c.DO = *do.(*gen.DO)
	return c
}
